1.  Manejo de Excepciones. Es un mecanismo que sirve para
    interrumpir el flujo normal del programa y continuar en 
    algun contexto rodeado o bloque de codigo que majejara
    dicha interrupcion.

2.  Conceptos claves:
    i)  Levantar una excepci贸n
    ii) Manejo de una Excepcion
    iii)Excepci贸n no controlada
    iv) Objetos de Excepci贸n

3.  Las excepciones provenientes de errores del programador:
        * IntentationError
        * SyntaxError
        * NameError
    Casi nunca deberian ser cachadas.

4.  Para que cuando un bloque de codigo contenga una linea vacia,
    sin codigo, no levante una excepcion se usa la palabra pass 
    en dicho bloque, en dicha linea, que es como un no-op o 
    no operation line, una linea sin operacion.

5.  El formato de una excepcion es el siguiente:
    try:
        bloque
        de
        codigo
    except (TipoError1[,TipoError2, . . . ,TipoErrorN]) as e:
        lo que se tiene
        que hacer para
        manejar el error
    except OtroError:
        tambien se puede usar
        un except por cada Tipo
        de Error. O un renglon 
        por cada except
    
6.  Para elevar una excepcion y replicarla hacia arriba en las 
    llamadas se utiliza la palabra clave "raise"

7.  No es para nada recomendable degresar codigos numericos cuando ocurre 
    alguna excepcion. Es mejor usar raise para que levante la excepcion 
    y manejarla en el nivel siguiente superior.

8.  Existe un formato para mostrar el contenido de una excepcion cuando
    ocurre, a continuacion se muestra

9.  Tipos de Excepciones mas comunes:
    * IndexError    Cuando se hace referencia a un indice que sobre pasa el indice mayor de la lista
    * ValueError    Cuando se introduce un objeto permitido pero su contenido es inapropiado. Ejemplo:
                    >>> int("hola")
    * KeyError      Cuando la busqueda dentro de un mapa falla. Ejemplo:
                    >>> codes = dict(fdx=73, li=78, yol=78)
                    >>> codes
                    {'fdx': 73, 'li': 78, 'yol': 78}
                    >>> codes['fdx']
                    73
                    >>> codes['vale']
                    Traceback (most recent call last):
                    File "<stdin>", line 1, in <module>
                    KeyError: 'vale'

10. LBYL vs EAFP. Solo hay dos enfoques para lidiar con una operaci贸n de programa
    que podria fallar:
    a)  Check All preconditions     Checar que las condiciones previas para una 
                                    operacion propensa a fallas se cumplan antes
                                    de intentar la operacion.
    b)  Prepare for consequences    Esperar ciegamente lo mejor, pero estar preparado
                                    para enfrentar las consecuencias si no funciona
    En python estas dos filosofias se conocen como:
    a)  LBYL
        Look Before you leap                    Mira antes de saltar
    b)  EAFP
        Easy to Ask Forgivenes than Permission  Es mas facil pedir perdon que permiso
    respectivamente, y Python esta fuertemente a favor de: 
    EAFP   Porque pone la logica primaria para el camino feliz en su forma mas legible
            con desviaciones del flujo normal manejadas por separado en lugar de 
            intercalarlas con el flujo principal.
    Esto debido a que:
    i.      Las excepciones no son tan facilmente ignoradas, por que saltan a la vista
    ii.     Los Codigos de Error son silenciosos por default y por lo mismo, dificiles 
            de detectar, y faciles de ignorar.
    iii.    Las Excepciones junto con EAFP hacen mas dificil para los problemas el ser
            silenciosamente ignorados.

11. Formato try, catch, except, else... finally
        try:
            # bloque try
        except Error1:
            # tratamiento del error 1
        except Error2:
            # Tratamiendo del error 2
            .
            .
            .
        except ErrorN:
            # Tratamiento del error N
        except Exception as e:
            # Tratamiento generico
        else:
            # Se ejecuta si no falla el try
        finally:
            # Se ejecuta no importa si
            # el bloque try falla o no
12. 
