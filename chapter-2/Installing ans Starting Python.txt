1. Despues de instalar python en nuestro equipo:
    a) Abrimos una terminal y tecleamos
            python3
    b) Esto nos mostrara el entorno de linea de comandos
       de python el cual es un ciclo de lectura, evaluacion
       e impresion...
            Read
            Evaluate
            Print
            Loop (para volver al estado inicial de espera)
    c) El proceso anterior se conoce como REPL
    d) Una vez abierto, el REPL nos mostrara un prompt
       representado por >>> que nos indica que esta listo
       para recibir un comando o cualquier otra cosa para
       evaluar...
    d) Una vez que recibe algun comando o expresion, lo 
       evalua y arroja un resultado si la expresion es
       evaluable

       TRUCO: si tecleamos el underscore (_) imprimira el
       ultimo resultado numerico obtenido.
       OJO: este truco solo funciona solo en el entorno de REPL

2. Para poder ver el Zen de Python lo podemos hacer desde dentro
   del REPL ejecutando el siguiente comando:
      import this

3. Para importar modulos o bibliotecas de clases en el REPL usamos
   la palabra reservada import.

   Ejemplo: Para importar el modulo matematico para poder usar la 
   raiz cuadrada tecleamos

   >>> import math

   Y para usar alguno de los metodos o funciones se puede hacer asÃ­:
   >>> x = math.sqrt(25)
   >>> 5.0

   Como podemos ver, la llamada al metodo o funcion se hace mediante 
   el uso del nombre del modulo seguido de un punto seguido del metodo
   o funcion que queremos utilizar.

      nombre_modulo_o_clase.funcion_o_metodo

   Si queremos usar solo el metodo tenemos que usar en vez del import:
      from math import sqrt
   
   Y lo usariamos de la siguiente forma:
   >>> x = sqrt(25)
   >>> 5.0

   Incluso si quisieramos acortar mas el nombre podriamos hacer lo siguiente:
      from math import sqrt as sq

   Y lo usariamos de la siguiente forma:
   >>> x = sq(25)
   >>> 5.0

4. Para obtener ayuda acerca de los modulos u objetos que podemos usar
   en python tecleamos el comando help...
   El cual nos indicara que se puede mandar llamar tambien de la siguiente
   forma: help (objeto)... 
   Lo cual provocara que nos aparezca la documentacion relacionada a objeto
   TIP: tambien podemos usar help(objeto.metodo) lo cual nos desplegara
   informacion tecnica acerca del metoto del objeto.

5. El metodo int es muy versatil, ya que puede realizar:
   a) Conversion de un entero en forma de cadena a numero entero:
         >>>int("1234")
         1234
      OJO: NO funciona con cadenas que no son representacion de un entero
         >>> int("1234.77")
         Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
         ValueError: invalid literal for int() with base 10: '1234.77'
   b) Conversion a entero de una cadena que representa un numero en una base
      numerica:
         >>> int("1001001",2)    # Cadena binaria en base numerica 2 o binario
         73
         >>> int("10000", 3)     #Cadena numerica en base numerica 3
         81

6. Cualquier numero que se meta con punto decimal o en notacion cientifica 
   python lo interpretara como un numero de coma flotante. Ejemplos:
   a) .1
   b) 3.1416
   c) 1.23e3
   d) 1.24e-3
   NOTAS: 
      REPL siempre imprimira la forma mas legible del numero
      Cualquier operacion entre un flotante y un entero promovera
      el resultado a un numero flotante

7. La funcion float() sirve para convertir cualquier expresion valida en un numero
   de coma flotante:
   a) >>> float(7)
      7
   b) >>> float("1.618")
      1.618
   c) >>> float("nan")
      nan
   d) >>> float("inf") 'infinito positivo
      inf
      >>> float("-inf") 'infinito negativo
      -inf

8. La representacion de Null en Pythno es None y se usa asÃ­:
   a) >>> a = None
      >>> a  is None
      True

9. Como ver la svariables que he estado utilizando en el REPL:
   a) dir() will give you the list of in-scope variables
   b) globals() will give you a dictionary of global variables
   c) locals() will give you a dictionary of local variables

10. Uso del metodo bool(...)
   a) bool(1), bool("hola"), bool(.1) regresaran:
            True
      Porque cualquier valor diferente de 0 o "" es Verdadero
      como en el lenguaje C
   b) bool(0), bool(""), bool([]), bool({}), bool(()) regresaran:
            False 
      Por la misma regla que se indica en el inciso a.

11. Tipos de if 
   a) if "solitario de una unica cndicion":
   b) if "condicion":
         print("Hace algo")
      else:
         print("hace otra cosa")
   c) if "condicion multiple":
         print("entra por aqui")
      elif "otra condicion":
         print("entra por aca")
      elif: "una condicion mas"
         print("entra por aqui")
      else:
         print("salida!)

12. Los tipos de colecciones que maneja Python son:
	a) str		Cadena
	b) bytes	Arreglos de bytes
	c) list		Listas
	d) dict		Diccionarios

13. Para crear cadenas en bruto sin necesidad de usar
    secuencias de escape:
      >>> path = r'c:\users\Federico\pepa'
      >>> path
      'c:\\users\\Federico\\pepa'
      >>> print(path)
      c:\users\Federico\pepa

   NOTA: sigue el principio de what You See Is What You Get (WYSIWYG)

14. Las cadenas en python se denominan tipos de secuencia,
    y admiten algunos tipos de operaciones ya que se toman
    como arreglos, como en el siguiente ejemplo:
      >>> s = 'parrot'
      >>> s[4]
      'o'
      >>> type(s[4])
      <class 'str'>
    Si te fijas, pudimos obtener el caracter que se encuentra
    en la quinta posiciÃ³n. Y despues determinar el tipo de 
    dato que es.

15. Para obtener ayuda acerca del objeto str tecleamos:
      help(str)

16. Las cadenas son objetos inmutables, por lo cual despues de 
    utilizar los metodos de este tipo de datos el contenido 
    original se conserva. Ejemplo:
      >>> cadena = 'hola amigos como estan'
      >>> cadena.capitalize()

17. Si quiero mostrar caracteres unicode que sean emojis tengo
    que utilizar la siguiente sintaxis:
         \U + 000 + CODIGO_EMOJI
      Por ejemplo el codigo unicode de pila de caca ðŸ’© es U+1F4A9
      el CODIGO_EMOJI seria 1F4A9.
      => lo aplicariamos a la sintaxis para usarlo en python
         que seria:
         \U0001F4A9        OJO: la u tiene que ir en MAYUSCULAS
      Entonces, para imprimirlo por medio de python tendriamos
      que hacer algo como esto:
      >>> print("\U0001F4A9")
      ðŸ’©

      Si deseamos realizar obtener el codigo en el formato de 
      unicode de un emoji, solo tenemos que usar estas instruccion
      de ejemplo:
         >>> x = 'ðŸ’©'
         >>> print(x.encode('unicode-escape').decode('ASCII').upper())
         \U0001F4A9

18. Si quiero obtener un arreglo de bytes de una cadena se logra
    mediante el uso del metodo encode(). Ejemplo:
         >>> s.encode()
         b'Hola Mundo'

19. Si quiero el codigo ASCII de algun caracter de un arreglo bytes
    se obtiene de la siguiente forma:
         >>> s = "Hola Mundo"
         >>> s[0].encode()
         b'H'
         >>> s[0].encode()[0]
         72
         >>> s[1].encode()[0]
         111
         >>> s[2].encode()[0]
         108
         >>> b = s.encode()
         >>> b
         b'Hola Mundo'
         >>> b[0]
         72
         >>> b[1]
         111
         >>> b[2]
         108
         >>> b[3]
         97

20. Conversion entre Strings y Bytes
      a) De string a bytes str.encode()
      b) de bytes a string byte.decode()

21. Las Listas son otro tipo de colecciones que:
   a) Son mutables, esto es, que se pueden modificar, 
      quitar o poner elementos
   b) Pueden contener cualquier tipo de elementos
   c) Estan basados en indice 0
   d) Tienen un constructor que se usa de la siguiente forma:
      >>> lista = list("caracteres")
      ['c', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'e', 's']
   e) Otra manera de modificarla es indicando el numero de indice en el 
      cual se requiere hacer la modificacion
      >>> lista = list("caracteres")
      >>> lista
      ['c', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'e', 's']
      >>> lista[0] = 'X'      'Aqui es donde se realiza el cambio en la lista
      >>> lista
      ['X', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'e', 's']
   f) La unica manera de agregar mas elementos a una lista es mediante el 
      metodo append(...)
      Ejemplo:
      >>> lista.append('F')
      >>> lista
      ['X', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'e', 's', 'F']
   g) Se puede obtener el ultimo elemento de una lista mediante:
      >>> lista[-1]
      'F'   

22. Los diccionarios son colecciones de elementos en forma de par clave-valor
    y tienen la siguiente sintaxis:
    {clave1:valor1, clave2:valor2, . . . , claveN:valorN}
    Este tipo de coleccion tiene las siguientes caracteristicas:
    a) Es mutable
    b) Mantiene el orden de insercion

23. El bucle for en python tiene la siguiente sintexis:
      for item in iterable:
         ... body ...

24. Ejemplo de uso del bucle for para una lista:
      >>> ciudades = ['monterrey','guadalajara','reynosa','cdmx','jalisco','tijuana']
      >>> ciudades
      ['monterrey', 'guadalajara', 'reynosa', 'cdmx', 'jalisco', 'tijuana']
      >>> for ciudad in ciudades:
      ...     print(ciudad)
      ... 
      monterrey
      guadalajara
      reynosa
      cdmx
      jalisco
      tijuana

25. Ejemplo de uso de for para un diccionario:
      >>> colors={'crimson':'0xdc143c','coral':'0xff7f50','teal':'0x008080'}
      >>> for color in colors:
      ...     print(color, colors[color])
      ... 
      crimson 0xdc143c
      coral 0xff7f50
      teal 0x008080
   Si cambio los valores del diccionario a numericos en la impresion me saldra
   su valor equivalente en entero:
      >>> colors={'crimson':0xdc143c,'coral':0xff7f50,'teal':0x008080}
      >>> for color in colors:
      ...     print(color, colors[color])
      ... 
      crimson 14423100
      coral 16744272
      teal 32896

26. Ejemplo de uso de una coleccion tipo lista para ir a traer las palabras
    de una pagina web:
      >>> from urllib.request import urlopen
      >>> story = urlopen('http://sixty-north.com/c/t.txt')
      >>> story_words = []
      >>> for line in story:
      ...     line_words = line.split()
      ...     for word in line_words:
      ...         story_words.append(word)
      ... 
      >>> story.close()
      >>> story_words
      [b'It', b'was', b'the', b'best', b'of', b'times', b'it', b'was', b'the', b'worst', b'of', b'times', b'it', b'was', b'the', b'age', b'of', b'wisdom', b'it', b'was', b'the', b'age', b'of', b'foolishness', b'it', b'was', b'the', b'epoch', b'of', b'belief', b'it', b'was', b'the', b'epoch', b'of', b'incredulity', b'it', b'was', b'the', b'season', b'of', b'Light', b'it', b'was', b'the', b'season', b'of', b'Darkness', b'it', b'was', b'the', b'spring', b'of', b'hope', b'it', b'was', b'the', b'winter', b'of', b'despair', b'we', b'had', b'everything', b'before', b'us', b'we', b'had', b'nothing', b'before', b'us', b'we', b'were', b'all', b'going', b'direct', b'to', b'Heaven', b'we', b'were', b'all', b'going', b'direct', b'the', b'other', b'way', b'in', b'short', b'the', b'period', b'was', b'so', b'far', b'like', b'the', b'present', b'period', b'that', b'some', b'of', b'its', b'noisiest', b'authorities', b'insisted', b'on', b'its', b'being', b'received', b'for', b'good', b'or', b'for', b'evil', b'in', b'the', b'superlative', b'degree', b'of', b'comparison', b'only']
      NOTA: Para este ejemplo nos debemos de asegurar que la indentacion sea de 4
            caracteres por que si no, nos va a fallar y se tendra que teclear de
            nuevo todo.

27. 