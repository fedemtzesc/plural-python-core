1.  Las tuplas son secuencias inmutables de todo tipo de objetos.
    a)  Los objetos dentro de ellas no se pueden reemplazr o eliminar
    b)  No se pueden agregar nuevos elementos
    c)  Tienen un parecido a las listas con la diferencia de usar parentesis
        en vez de corchectes como delimitadores.
    d)  Tambien se crean y se accesan de forma similar a las listas:
            >>> t = ("Norway", 4.56, 3)
            >>> t
            ('Norway', 4.56, 3)
            >>> t[1]
            4.56
            >>> t[2]; t[0]
            3
            'Norway'
            >>> len(t)
            3

    e)  Podemos iterar con ellas usando el ciclo for:
            >>> for i in t:
            ...     print(i)
            ... 
            Norway
            4.56
            3
    f)  Tambien podemos concatenarle otra tupla para extenderla
        >>> t + ("otro", "segmento", "de", "tupla", "concatenado")
        ('Norway', 4.56, 3, 'otro', 'segmento', 'de', 'tupla', 'concatenado')
    g)  Y repetirla usando el operador de multipicacion:
            >>> t * 2
            ('Norway', 4.56, 3, 'Norway', 4.56, 3)
            >>> t * 3
            ('Norway', 4.56, 3, 'Norway', 4.56, 3, 'Norway', 4.56, 3)
    h)  Podemos crear tuplas anidadas, o arreglos de tuplas dentro de una tupla:
            >>> a = ((1,2),(3,4),(5,6))
            >>> a
            ((1, 2), (3, 4), (5, 6))
        Y accesar sus valores mediante indices:
            ((1, 2), (3, 4), (5, 6))
            >>> a[1][1]
            4
            >>> a[2][0]
            5
            >>> a[0]
            (1, 2)
    i) Especificamos una tupla vacia de la siguiente manera:
            >>> e = ()
    j)  Si queremos especificar uina tupla de un solo valor entero:
        no lo hacemo así:
            >>> h = (1973)
        porque python lo interpreta como un entero con parentesis
        con orden de presedencia de una operacion matematica:
            >>> type(h)
            <class 'int'>
    k)  La forma correcta de crear una tupla de un solo elemento seria de la siguiente
        forma:
            >>> h = (1973,)
            >>> h
            (1973,)
            >>> type(h)
            <class 'tuple'>
    l)  En muchos casos se pueden omitir los parentesis:
            >>> p = 1,2,3,4,5,6
            >>> p
            (1, 2, 3, 4, 5, 6)
            >>> type(p)
            <class 'tuple'>
    m)  El DESEMPAQUETADO DE TUPLAS consiste en asignarle un nombre a cada valor de una
        tupla devuelta en una funcion, como en el siguiente ejemplo:
            >>> min_max((1,2,3,5,8,13,21,))
            (1, 21)
            >>> menor, mayor= min_max((1,2,3,5,8,13,21,))
            >>> menor
            1
            >>> mayor
            21
        El desempaquetado funciona incluso hasta con tuplas anidadas:
            >>> (a,(b,(c,d)))=(4, (3,(2,1)))
            >>> a; b; c; d
            4
            3
            2
            1
    n)  Un uso muy comun del desempaquetado es para intercambiar valores de una manera muy 
        sencilla como se muestra en el ejemplo:
            >>> a = 'jelly'
            >>> b = 'bean'
            >>> a, b = b, a
            >>> a; b
            'bean'
            'jelly'
    o)  Existe una funcion incorporada en python que nos permite convertir otras colecciones
        en tuplas:
            >>> tuple([5,4,3,2,1])
            (5, 4, 3, 2, 1)
            >>> tuple('Federico')
            ('F', 'e', 'd', 'e', 'r', 'i', 'c', 'o')

2.  Las cadenas tambien son secuencias pero de caracteres, son inmutables tambien. Cuando se
    concatenan no quiere decir que se haya extendido la cadena original, sino que por la misma
    inmutabilidad se tiene que crear una cadena nueva que es la representacion de la cadena
    original con la que se le concateno.
    A continuacion vamos a ver algunas operaciones que podemos realizar con las cadenas usando
    funciones incorporadas de python:
    a)  Obtener la longitud de una cadena:
            >>> len(cadena)
            >>> regresa la longitud en caracreres contenidos en cadena
    b)  Concatenacion con metodo join()
        Esta funcion nos permite concatenar los elementos de una coleccion dada como argumento
        separados por medio del caracter o cadena que se especifique al inicio de la llamada a 
        la funcion join como en los ejemplos siguientes:
            >>> ";".join(['#214365','#547698','#325443','#879832',]) #usando una lista
            '#214365;#547698;#325443;#879832'
            >>> " : ".join(('#214365','#547698','#325443','#879832',)) # usando una tupla
            '#214365 : #547698 : #325443 : #879832'
            >>> " | ".join({'#214365','#547698','#325443','#879832',}) # usando un set
            '#214365 | #879832 | #547698 | #325443'
    c)  Tambien podemos volverlos a separar mediante el uso de la funcion incorporada split():
            >>> colors.split(';')
            ['#214365', '#547698', '#325443', '#879832']
    d)  Una forma elegante de contactenar cadenas sin un separador es usando la fucnion join con 
        cadena vacia al inicio:
            >>> ''.join(['Federico','Martinez','Escamilla',])
            'FedericoMartinezEscamilla'
    e)  Otra funcion muy util es partition() que separa una cadena en 3 partes dentro de una tupla:
        a)  La parte anterior al separador
        b)  La parte que corresponde al separador
        c)  Y la parte posterior al separador
        Veamos el ejemplo funcional de esta funcion:
            >>> 'Federico Martinez Escamilla'.partition('Martinez')
            ('Federico ', 'Martinez', ' Escamilla')
    f)  El metodo partition se usa muy comunmente para el desempaquetado de la tupla que regresa
        como se muestra a continuación:
            >>> llegada, separador, desde = 'Monterrey:CDMX'.partition(':')
            >>> llegada
            'Monterrey'
            >>> desde
            'CDMX'
        Tambien podemos usar el guin bajo para desempaquetar ahi el caracter separador que no vamos
        a utilizar:
            >>> origen, _, destino = 'MTY-CLN'.partition('-')
            >>> origen
            'MTY'
            >>> destino
            'CLN'
            >>> _
            '-'
    g)  El formateo de cadenas de puede realizar de diferentes maneras que se presentaran a 
        continuación por medio de ejemplos:
            >>> "{0}°north {1}°east".format(59.7, 10.4)
            '59.7°north 10.4°east'
            >>> "La edad de {0} es de {1} años".format('Fede', 50)
            'La edad de Fede es de 50 años'
            >>> "La edad de {0} es de {1} años. Y {0} es muy guapo!".format('Fede', 50)
            'La edad de Fede es de 50 años. Y Fede es muy guapo!'
            >>> "Numeros Fibonacci: {},{},{},{},{},{}...".format(0,1,1,2,3,5)
            'Numeros Fibonacci: 0,1,1,2,3,5...'
            >>> "Me llamo {nom} {ape}".format(nom='Federico', ape='Martinez')
            'Me llamo Federico Martinez'
            >>> "Mi posicion en R3 es x={pos[0]}, y={pos[1]}, z={pos[2]}".format(pos=(1,9,73))
            'Mi posicion en R3 es x=1, y=9, z=73'
            >>> import math
            >>> "Constantes: pi={m.pi}, e={m.e}".format(m=math)
            'Constantes: pi=3.141592653589793, e=2.718281828459045'
            >>> "Constantes: pi={m.pi:.3f}, e={m.e:.3f}".format(m=math)
            'Constantes: pi=3.142, e=2.718'
    h)  Para hacer mas simple lo anterior, PEP498 introdujo lo que se llama f-string para 
        interpolacion de cadenas. A continuación unos ejemplos:
            >>> f"uno mas uno es {1+1}"
            'uno mas uno es 2'
            >>> value = 4 * 20
            >>> f"El valor es {value}"
            'El valor es 80'
            >>> import datetime
            >>> f"The current time is {datetime.datetime.now().isoformat()}"
            'The current time is 2024-05-01T14:13:54.606998'
            >>> f"Constantes matematicas: pi={math.pi}, e={math.e}"
            'Constantes matematicas: pi=3.141592653589793, e=2.718281828459045'
            >>> f"Constantes matematicas: pi={math.pi:.3f}, e={math.e:.3f}"
            'Constantes matematicas: pi=3.142, e=2.718'
            >>> 
      
3.  Los objetos range son secuencias que representan una progresion aritmetica 
    de enteros:
        >>> range(5)
        range(0, 5)
        >>> range(5,2)
        range(5, 2)
        >>> range(5,2,2)
        range(5, 2, 2)
        >>> 
