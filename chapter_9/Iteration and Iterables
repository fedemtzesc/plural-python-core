1.  Las Comprehensions son sintaxis concisas para describir listas,
    sets y diccionarios en un estilo declarativo o funcional.
    i) Son facilmente leibles y expresivas
    ii) Casi se leen como un lenguaje natural

    Las comprensiones son mas faciles de explicar con ejemplos:
    a)  En el siguiente ejemplo crearemos una lista de palabras,
        para posteriormente generar de esta otra lista que 
        corresponda a las longitudes de cada una de las cadenas
        de la primera lista:
        >>> words = "Say I love you is want to hear from you i notihng I love you".split()
        >>> words
        ['Say', 'I', 'love', 'you', 'is', 'want', 'to', 'hear', 'from', 'you', 'i', 'notihng', 'I', 'love', 'you']
        >>> # Y a continuacion viene la comprension que genera la lista de longitudes
        >>> [len(word) for word in words]   # En la primera parte el metodo len() definira lo que se quiere obtener
        [3, 1, 4, 3, 2, 4, 2, 4, 4, 3, 1, 7, 1, 4, 3]   # para generar la nueva lista...

    b)  El siguiente ejemplo tambien obtiene la longitud de cadena de los
        primeros 20 numeros al los cuales se les aplica la funcion factorial
        contenida en la biblioteca math:
        >>> from math import factorial as fac
        >>> f = [ len(str(fac(x))) for x in range(20) ]
        >>> f
        [1, 1, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18]

    c)  Tambien podemos crear un set utilizando una sintaxis parecida pero en
        vez de utilizar los [] de una lista utilizaremos los {} de un set:
        >>> s = { len(str(fac(x))) for x in range(20) }
        >>> type(s)
        <class 'set'>
        >>> s
        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18}
        Y como se puede ver, se eliminan los elementos repetidos por que el 
        set no los admite.

    d)  Entonces, la sintaxis de una conmprehension de lista es la siguiente:
        Primeramente se podria decir que se divide en dos partes encerradas 
        entre corchetes []:
        [funcion_de_definicion_de_la_nueva_lista for_para_iterar_cada_elememto_del_cual_se_generara_nueva_lista]
        Despues usando una sintaxis mas programatica:
        [ expr(item) for item in items ]
        NOTA: La expr que produce los nuevos elementos de la lista puede ser cualquier
        expresion de python

    e)  La sintaxis de una conmprehension de set es la siguiente:
        Primeramente se podria decir que se divide en dos partes encerradas 
        entre llaves {}:
        {funcion_de_definicion_de_la_nueva_lista for_para_iterar_cada_elememto_del_cual_se_generara_nueva_lista}
        Despues usando una sintaxis mas programatica:
        { expr(item) for item in items }
        NOTA: La expr que produce los nuevos elementos de la lista puede ser cualquier
        expresion de python

    f)  Y la sintaxis para una comprension de diccionario seria la siguiente:

        {
            key_expr(item) : value_expr(item)
            for item in iterable
        }
        El siguiente ejemplo lo explicaremos por pasos:
        PASO 1:
        # Creamos el diccionario a partir del cual le aplicaremos la
        # comprehension para generar el nuevo diccionario.
        # El diciconario a partir del cual partimos es uno para el cual
        # la clave es el nombre de la persona y el valor sus apellidos
        >>> nombres_derechos = { 'Federico':'Martinez Escamilla',
        ...                      'Maria Yolanda' : 'Belmares Carrizales',
        ...                      'Valeria Estefania': 'Martinez Belmares',
        ...                      'Sebastian Alejandro' : 'Ramos Belmares',
        ... 
                            }
        PASO 2:
        # Una vez creado el diccionario base creamos la comprehension. 
        # El diccionario resultante es un conjunto clave:valor pero con los
        # apellidos en la clave y los nombres en el valor para poder utilizarlos
        # en algun documento formal donde se requiere ese formato:
            # Asignacion       | Expresion     | Obtenemos los valores usando la tecnica de 
            #                  | en la expr    | descompresion de tuplas ya que la funcion
            #                  | definimos la  | items() nos devuelve tuplas de 2 valores
            #                  | clave:valor   | al aplicarla a un diccionario
        >>> nombres_formales = { apellido:nombre for nombre,apellido in nombres_derechos.items() }
        PASO 3: 
        # Finalmente procedemos a imprimir el nuevo diccionario para comprobar que 
        # aplicamos correctamente nuestra comprehension:
        >>> nombres_formales
        {'Martinez Escamilla': 'Federico', 'Belmares Carrizales': 'Maria Yolanda', 'Martinez Belmares': 'Valeria Estefania', 'Ramos Belmares': 'Sebastian Alejandro'}

    g)  El grado de complejidad de la expresion no esta limitado y puede ser tan compleja como se 
        desee pero hay que tener cuidado de no sobrepasarse por que lo que se busca es la simplicidad
        y que los compaÃ±eros programadores puedan entender nuestro codigo.
        A continuacion un ejemplo con un grado de complejidad alto que obtiene los paths de los archivos 
        python en el directorio actual como claves y sus longitudes como valores:
            >>> import os
            >>> import glob
            >>> file_sizes = { os.path.realpath(p): os.stat(p).st_size for p in glob.glob('*.py') }
            >>> from pprint import pp
            >>> pp(file_sizes)
            {'/Users/federicomartinezescamilla/cursos/python/plural-python-core/chapter-8/dirs.py': 550,
            '/Users/federicomartinezescamilla/cursos/python/plural-python-core/chapter-8/exceptional.py': 781,
            '/Users/federicomartinezescamilla/cursos/python/plural-python-core/chapter-8/roots.py': 859}

2.  Para entender losProtocolos de Iteracion veamos a continuacion que son y comose diferencian un objeto
    iterable de un objeto iterador:
                     ITERABLE                                    ITERATOR
            Puede ser pasado a la funcion               Puede ser pasado a la funcion
            iter(iterable) para producir                next(iterator) para obtener el
            un objeto iterator.                         siguiente valor en la secuencia
                                                        subyacente.
    Y para entender esto mejor, a continuacion mostramos un ejemplo de como se utiliza cada tipo de objeto:
        >>> iterable = ['Spring','Summer','Autum','Winter',]
        >>> iterator = iter(iterable)
        >>> iterator
        <list_iterator object at 0x1033c4d00>
        >>> next(iterator)
        'Spring'
        >>> next(iterator)
        'Summer'
        >>> next(iterator)
        'Autum'
        >>> next(iterator)
        'Winter'
        >>> next(iterator)
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        StopIteration
        # Cuando ya no hay mas elementos en la secuencia se genera una excepcion
    Para validar lo anterior se tiene que crear una funcion que reciba un objeto iterable 
    para poder controlar la excepcion:
        >>> def first(iterable):
        ...     iterator = iter(iterable)
        ...     try:
        ...         return next(iterator)
        ...     except StopIteration:
        ...         raise ValueError("iterable is empty")
        ... 
        >>> first(['1st','2nd','erd',])
        '1st'
        >>> first({'1st','2nd','3rd',})
        '2nd'       #Aqui me aparece este valor por que el contenido del set no tiene un orden 
        >>> first(set()) # Si introducimos una secuencia vacia se levanta un error:
        Traceback (most recent call last):
        File "<stdin>", line 4, in first
        StopIteration

        During handling of the above exception, another exception occurred:

        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "<stdin>", line 6, in first
        ValueError: iterable is empty

3.  Generator Functions (Funciones Generadoras de Iteradores). Son unas de las mas poderosas y elegantes caracteristicas 
    de python. Son una forma de describir series iterables por medio de funciones.
    
    Realizan lo que se llama "lazy evaluation" lo que significa que calculan el 
    siguiente valor a pedido.

    Para que una funcion sea de este tipo tiene que incluir al menos una instruccion
    yield en su definicion.

    Y tambien puede contener la palabra clave return pero sin argumentos.

    Y como cualquier otra funcion, hay un retorno implicito al final de la definicion.

    Para entender mejor el concepto a continuacion lo ilustraremos con un ejemplo 
    de codigo:
        >>> def gen123():
        ...     yield 1 #guarda este valor y los que siguen
        ...     yield 2
        ...     yield 3
        ... 
        >>> g = gen123()
        >>> g
        <generator object gen123 at 0x104568bf0> # Los generadores de hecho son iteradores de Python
        >>> next(g)
        1
        >>> next(g)
        2
        >>> next(g)
        3
        >>> next(g)
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        StopIteration

        Y debido a que los generadores de funciones son iteradores y que los iteradores tambien pueen ser 
        iterables, por lo tnato se pueden usar en iteraciones for:
        >>> for v in gen123():
        ...     print(v)
        ... 
        1
        2
        3
        
        TIP: ** Cada vez que se asigna una funcion generadora esta se inicializa en el primer elemento ***


4.  Generator Expressions (Expresiones generadoras de iteradores) 
        a)  Son un cruce entre Comprehensions y Generator Functions 
        
        b)  Utilizan una sintaxis similar al de las Comprehensions
        
        c)  Dan como resultado un objeto generador que produce una secuencia Lazy
        
        d)  Su sintaxis es muy similar a las de las Comprehensions:
                ( expr(item) for item in iterable )
            Solo que esta delimitada por parentesis en vez de brackets de listas
        
        e)  Las expresiones no generan los valores en el momento, sino que
            reciben las manera de generarlos mediante la expresion generadora
            con la que se le hace la asignacion al objeto. Los valores como en 
            las funciones generadoras se van generando conforme se vayan solicitando
            con la finalidad de no saturar la memoria con datos. He aqui un ejemplo
            de generacion de un objeto generador:
                    >>> million_squares = (x*x for x in range(1, 1000001) ) # AQUI NO SE GENERARON LOS DATOS AUN
                    >>> million_squares
                    <generator object <genexpr> at 0x104199e50>
                    >>> list(million_squares)[-10:] # Aqui se generaron los datos pero solo los que se solicitaron
                    [999982000081, 999984000064, 999986000049, 999988000036, 999990000025, 999992000016, 999994000009, 999996000004, 999998000001, 1000000000000]
        
        f)  Son objetos generadores de un solo uso, esto es, con solo extraer un solo 
            elemento ya no se podra usar mas delante por que regresara una lista vacia.
            Para poder volver a crear nuevamente el mismo objeto generador se tiene que
            repetir el mismo procedimiento volviendo a usar la misma expresion generadora.
            He aqui un ejemplo de esto:
                >>> mil = (x for x in range(1,1001))
                >>> list(mil)[0:10]
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                >>> list(mil)[0:10] # si lo queremos volver a utilizar ya no genera nada mas que una lista vacia
                []
            Y para poder volverlo a usar tenemos que recrear toda la expresion de nuevo como
            se hizo inicialmente:
                >>> list(mil)[100:120]
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]
                >>> list(mil)[100:120]
                []   # <=== Y regresamos a lo mismo nuevamente
        
        g)  La funcion integrada sum() hace la suma de cada uno de los numeros que contiene un objeto iterable
            en este caso el que se genera pasandole como argumento actual utilizando una expresion generadora:
                >>> sum(x for x in range(1, 101))
                5050

        h)  De la misma forma que las Comprehension tambien podemos aplicar filtros a las expresiones generadoras
            como en este siguiente ejemplo:
                >>> sum(x for x in range(1, 101) if x%2==0)
                2550
                Ã³
                >>> sum(x for x in range(1, 11) if x%2==0)
                30  # el iterable resultante seria: [2,4,6,8,10] => 2+4+6+8+10=30
            *** NOTA: En este caso utilice una expresion booleana despues del if pero tambien podemos usar una 
                      funcion que retorne valores booleanos.

5.  Iteration Tools. Son herramientas que conforman el vocabulario Python para trabajar con iteradores.
    Y se pueden combinar para generar poderosas declaraciones en un codigo muy conciso y legible.
    
    A continuacion se listan cada una de estas funciones de tratamiento de iterables:
        a)  La funcion sum(), como su nombre lo dice, crea la sumatoria de los numeros contenidos en un iterable.
            A continuaciÃ³n un ejemplo de uso de esta funcion:
            >>> sum([1,2,3])
            6
            >>> sum(["Hola","Mundo"])   # Aqui podemos comprobar que la funcion sum() solo soporta iterables numericos
            Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
            TypeError: unsupported operand type(s) for +: 'int' and 'str'
            >>> sum({1,2,3,4,5})
            15
            >>> sum({1:2,2:3,3:4,4:5})
            10
            >>> sum((1,2,3,4))
            10
            >>> sum(x for x in range(1,5))
            10

        b)  La funcion enumerate(iterable) genera un iterador que contiene una secuencia de tuplas con dos valores:
            uno es el indice y el otro el valor original del iterable que se le paso como parametro actual, para 
            entenderlo veamos el siguiente ejemplo:
            >>> e = enumerate([1,2,3,4,5,6])
            >>> e
            <enumerate object at 0x105082de0>
            >>> for x in e:
            ...     print(x)
            ... 
            (0, 1)
            (1, 2)
            (2, 3)
            (3, 4)
            (4, 5)
            (5, 6)

        c)  La funcion count(stat=0, step=1) sirve como una funcion generadora de una secuencia infinita
            del tipo lazy evaluation la cual genera y entrega un solo numero de la secuencia mientras se 
            va solicitando.

        d)  La funcion islice(iterable, start, stop[, step]) sirve para generar un objeto iterable de una 
            tajada de otro objeto iterable. A menudo se acompaÃ±a de la funcion count(...) como en el ejemplo 
            que viene a continuacion:
                >>> diez = islice((x for x in count()), 10) # Aqui se genera un iterador del tipo islice que
                >>> diez                                    # va a contener los primeros diez numeros que
                <itertools.islice object at 0x10577b600>    # arroje la funcion infinita count() ya que no 
                >>> for i in diez:                          # tiene fin si la usaramos con un for, pero como 
                ...     print(i)                            # en este caso le solicitamos de uno por uno, no
                ...                                         # se crea un ciclo infinitopor ser del tipo 
                0                                           # lazy evaluation
                1
                2
                3
                4
                5
                6
                7
                8
                9
            Si quisiera que mi secuencia resultante empezara en 1 termine en 10 tendria que modificar los argumentos 
            en el count de la primer lÃ­nea de nuestro ejemplo como viene a continuacion:
                >>> diez = islice((x for x in count(1,1)), 10)
                >>> for i in diez:
                ...     print(i)
                ... 
                1
                2
                3
                4
                5
                6
                7
                8
                9
                10
            Tambien podemos aplicar filtros a nuestra expresion del argumento de la funcion islice() para poder elegir 
            solo los elementos que necesitamos, por ejemplo, qsi queremos los primeros 100 numeros primos como en el 
            siguiente ejemplo donde usamos nuestro modulo primos:
                >>> cien_primos = islice( (x for x in count() if p.is_prime(x)),100 )
                >>> cl = list(cien_primos)                #El if viene a aplicar nuestro filtro para tomar solo los
                >>> len(cl)                               #numeros primos.
                100
                >>> cl
                [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]
        
        e)  La funcion itertools.any() determina si al menos uno de los elementos de una serie son True para poder evaluarse
            como True en su salida, en resumen, funciona como un operador OR booleano:
                >>> any([True, False, True])
                True
                >>> any([False, False, False])
                False
                >>> any(['', 1, False])
                True
                >>> any(['', None, 0])
                False
            Si le aplicamos la tabla binaria para el OR veremos que se comporta como se espera:
                >>> any([0, 0, 0])
                False
                >>> any([0, 0, 1])
                True
                >>> any([0, 1, 0])
                True
                >>> any([0, 1, 1])
                True
                >>> any([1, 0, 0])
                True
                >>> any([1, 0, 1])
                True
                >>> any([1, 1, 0])
                True
                >>> any([1, 1, 1])
                True
            Y lo mas imortante es que con any() podemos preguntar por ejemplo si existen numeros primos entre un rango de numeros
            combinandola con una expresion generadora:
                >>> any(p.is_prime(x) for x in range(1328, 1361))
                False
                >>> any(p.is_prime(x) for x in range(20, 30))
                True
                >>> p.is_prime(23) #Y podemos comprobar la ultima expresion generadora encontrando que por lo menos 23 si es un 
                True               #numero primo que esta dentro del rango de 20 y 29
        
        f)  La funcion itertools.all() arrojara True solamente si todos los elementos de una serie valen True en cualquiera de 
            las distintas formas que python interpreta este valor:
                >>> all([True, True, True])
                True
                >>> all([True, True, False])
                False
                >>> all([not None, 1, True])
                True
                >>> all(['', 1, True])
                False
                >>> all(['a', 1, True])
                True
                >>> all([not None, 0, True])
                False
            Si le aplicamos la correspondiente tabla del operador booleano AND veremos que se comporta como se espera:
                >>> all([0,0,0])
                False
                >>> all([0,0,1])
                False
                >>> all([0,1,0])
                False
                >>> all([0,1,1])
                False
                >>> all([1,0,0])
                False
                >>> all([1,0,1])
                False
                >>> all([1,1,0])
                False
                >>> all([1,1,1])
                True
            Un ejemplo de su uso con empresiones generadoras seria el siguiente donde tengo que comprobar que cada nombre de 
            la lista empieze con una letra mayuscula:
                >>> all(name==name.title() for name in ['London','Paris','Topkyo','New York','Sydney','Kuala Lumpur'])
                True             # title() hace que la primer letra de cada palabra se convierta en mayuscula
                >>> all(name==name.title() for name in ['London','Paris','Topkyo','New York','Sydney','kuala Lumpur'])
                False            # en este ultimo caso el ultimo elemento de la lista empieza con minuscula y ya no se cumple name==name.title()
                                 # y como any valida que todos sean True, con el ultimo elemento que es False regresara False en consecuencia.

        g)  La funcion itertools.zip iterara sobre dos o mas iterables y mostrara sus valores sincronizados en tuplas
            hasta que a uno de los iterables que recibe de parametro llegue a su elemento final (con el parametro strict=False) 
            o no tenga mas elementos en ese momento se detendra de generar mas tuplas.

            Su sintaxis es la siguiente:
                zip(*iterables, strict=True) --> Yield tuples until an input is exhausted.
                donde:
                    *iterables  pueden ser dos o mas secuencias iterables
                    strict      permite generar tuplas hasta que alguno de los iterables se termine su valor por default es True
                                Si lo pongo a False generara tuplas hasta que alguno de los iterables se termine
                                Si lo pongo en True o no lo especifico, me generara tuplas unicamente con los iterables 
                                que tengan misma cantidad de elementos 

            Para entender mejor este concepto mostraremos varios ejemplos a continuacion:

            i)  En este primer ejemplo, generareomos tuplas de tres valores que corresponden el primero a cada una de 
                las letras de la primera secuencia que es un string, el segundo valor coontendra el valor correspondiente 
                generado por el primer rango, y el tercer valor sera el correspondiente valor del segundo rango:
                    >>> list(zip('abcdefg', range(7), range(7)))
                    [('a', 0, 0), ('b', 1, 1), ('c', 2, 2), ('d', 3, 3), ('e', 4, 4), ('f', 5, 5), ('g', 6, 6)]
            ii) En este ejemplo generamos tuplas con 3 valores: (Dia de la semana, su valor ordinal, numero de dia)
                    >>> my_zip = zip(dias_sem, ordinales, [1,2,3,4,5,6,7], strict=True)
                    >>> pp(list(my_zip))
                    [('Lunes', '1ro', 1),
                    ('Martes', '2do', 2),           # Como se puee ver en las tuplas resultantes, la salida 
                    ('Miercoles', '3ro', 3),        # es una lista de tuplas con los valores de cada iterable
                    ('Jueves', '4to', 4),           # de manera ordenada y sincronizada. Y como se usa el 
                    ('Viernes', '5to', 5),          # Parametro strict=True, se valida que todos los iterables
                    ('Sabado', '6to', 6),           # contengan la misma cantidad de elemento, que de no ser
                    ('Domingo', '7mo', 7)]          # asi, se generara una excepcion como en el ejemplo a continuacion...
             
                    Si especificamos el parametro strict=True pero una de las tuplas tiene mas o menos elementos
                    que las otras que llegan como input tambien, se nos levantara la siguiente excepcion:
                        >>> my_zip = zip(dias_sem, ordinales, [1,2,3,4,5,6], strict=True)
                        >>> pp(list(my_zip))                # En este caso la lista (arg(3)) solo tiene 6 dias no 7
                        Traceback (most recent call last):
                        File "<stdin>", line 1, in <module>
                        ValueError: zip() argument 3 is shorter than arguments 1-2    
            
                    Si le quitamos el argumento strict o le ponemos su valor por defecto nos generara las tuplas
                    hasta que el iterador del argumento 3 que es el mas corto se agote, dejando la lista solo hasta 
                    el dia 6:
                        >>> my_zip = zip(dias_sem, ordinales, [1,2,3,4,5,6])
                        >>> pp(list(my_zip))
                        [('Lunes', '1ro', 1),
                        ('Martes', '2do', 2),
                        ('Miercoles', '3ro', 3),
                        ('Jueves', '4to', 4),
                        ('Viernes', '5to', 5),
                        ('Sabado', '6to', 6)]
                        >>> my_zip = zip(dias_sem, ordinales, [1,2,3,4,5,6], strict=False)
                        >>> pp(list(my_zip))
                        [('Lunes', '1ro', 1),
                        ('Martes', '2do', 2),
                        ('Miercoles', '3ro', 3),
                        ('Jueves', '4to', 4),
                        ('Viernes', '5to', 5),
                        ('Sabado', '6to', 6)]

                iii)Supongamos que necesitamos ver las temperaturas de dos dias cada hora... Y luego necesito saber
                    el promedio de temperaturas entre esos dias:
                        >>> lunes; martes
                        [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32]
                        [15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25]
                        >>> for lunes, martes in zip(lunes, martes):
                        ...     print(f"promedio temp. = {(lunes+martes)/2}")
                        ... 
                        promedio temp. = 17.5
                        promedio temp. = 18.5
                        promedio temp. = 19.5
                        promedio temp. = 20.5
                        promedio temp. = 21.0
                        promedio temp. = 22.0
                        promedio temp. = 23.0
                        promedio temp. = 24.0
                        promedio temp. = 25.0
                        promedio temp. = 26.0
                        promedio temp. = 27.0
                        promedio temp. = 28.5
                iv) De hecho, zip() puede soportar mas de 2 iterables, la cantidad que sea, como en la continuacion del 
                    ejemplo anterior dodne ahora calculamos el promedio de temperatura de 3 dias y la minima y maxima:
                        >>> lunes; martes;miercoles
                        [15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25]
                        [15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25]
                        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
                        >>> for temps in zip(lunes, martes, miercoles):
                        ...     print(f"min={min(temps):4.1f}, max={max(temps):4.1f}, average={(sum(temps)/len(temps)):4.1f}")
                        ... 
                        min= 0.0, max=15.0, average=10.0
                        min= 1.0, max=16.0, average=11.0
                        min= 2.0, max=17.0, average=12.0
                        min= 3.0, max=18.0, average=13.0
                        min= 4.0, max=18.0, average=13.3
                        min= 5.0, max=19.0, average=14.3
                        min= 6.0, max=20.0, average=15.3
                        min= 7.0, max=21.0, average=16.3
                        min= 8.0, max=22.0, average=17.3
                        min= 9.0, max=23.0, average=18.3
                        min=10.0, max=24.0, average=19.3
                        min=11.0, max=25.0, average=20.3
                    
                    Tambien podemos con any revisar si entre los tres dias todas las temperaturas fueron mayores a 0 grados
                    >>> temperaturas = chain(lunes,martes, miercoles) # Hacemos una secuencia de cadena de los valores de los
                    >>> all(t>0 for t in temperaturas)                # 3 dias y despues con all validamos que todos sean >0
                    False                                             # pero como el miercoles trae 0Â° no se cumple y es False

        h)  Finalmente tenemos a la funcion chain(*iterables) la cual recibe como parametros cualquier cantidad de iterables
            y los encadena de manera lineal creando unobjeto "chain object" el cual retorna uno por uno mediante el metodo next. 
            Para entender mejor el concemoto veamos el siguiente ejemplo:
                >>> tres_planetas = ['Mercurio','Venus','Tierra']
                >>> tres_juguetes = ['Trompo','Valero','Canicas']
                >>> tres_numeros  = [1,2,3]
                >>> obj_chain = chain(tres_planetas, tres_juguetes, tres_numeros)
                >>> obj_chain
                <itertools.chain object at 0x102873a00>
                >>> next(obj_chain)
                'Mercurio'
                >>> next(obj_chain)
                'Venus'
                >>> next(obj_chain)
                'Tierra'
                >>> next(obj_chain)
                'Trompo'
                >>> next(obj_chain)
                'Valero'
                >>> next(obj_chain)
                'Canicas'
                >>> next(obj_chain)
                1
                >>> next(obj_chain)
                2
                >>> next(obj_chain)
                3
                >>> next(obj_chain)
                Traceback (most recent call last):
                File "<stdin>", line 1, in <module>
                StopIteration
            El orden de los elementos depende del orden de los argumentos que le pasemos a chain()...:
                >>> obj_chain = chain(tres_juguetes, tres_numeros, tres_planetas)
                >>> for c in obj_chain:     #el objeto chain tambien es un iterable y por tanto compatible con for
                ...     print(c)
                ... 
                Trompo
                Valero
                Canicas
                1
                2
                3
                Mercurio
                Venus
                Tierra