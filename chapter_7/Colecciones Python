1.  Las tuplas son secuencias inmutables de todo tipo de objetos.
    a)  Los objetos dentro de ellas no se pueden reemplazr o eliminar
    b)  No se pueden agregar nuevos elementos
    c)  Tienen un parecido a las listas con la diferencia de usar parentesis
        en vez de corchectes como delimitadores.
    d)  Tambien se crean y se accesan de forma similar a las listas:
            >>> t = ("Norway", 4.56, 3)
            >>> t
            ('Norway', 4.56, 3)
            >>> t[1]
            4.56
            >>> t[2]; t[0]
            3
            'Norway'
            >>> len(t)
            3

    e)  Podemos iterar con ellas usando el ciclo for:
            >>> for i in t:
            ...     print(i)
            ... 
            Norway
            4.56
            3
    f)  Tambien podemos concatenarle otra tupla para extenderla
        >>> t + ("otro", "segmento", "de", "tupla", "concatenado")
        ('Norway', 4.56, 3, 'otro', 'segmento', 'de', 'tupla', 'concatenado')
    g)  Y repetirla usando el operador de multipicacion:
            >>> t * 2
            ('Norway', 4.56, 3, 'Norway', 4.56, 3)
            >>> t * 3
            ('Norway', 4.56, 3, 'Norway', 4.56, 3, 'Norway', 4.56, 3)
    h)  Podemos crear tuplas anidadas, o arreglos de tuplas dentro de una tupla:
            >>> a = ((1,2),(3,4),(5,6))
            >>> a
            ((1, 2), (3, 4), (5, 6))
        Y accesar sus valores mediante indices:
            ((1, 2), (3, 4), (5, 6))
            >>> a[1][1]
            4
            >>> a[2][0]
            5
            >>> a[0]
            (1, 2)
    i) Especificamos una tupla vacia de la siguiente manera:
            >>> e = ()
    j)  Si queremos especificar uina tupla de un solo valor entero:
        no lo hacemo así:
            >>> h = (1973)
        porque python lo interpreta como un entero con parentesis
        con orden de presedencia de una operacion matematica:
            >>> type(h)
            <class 'int'>
    k)  La forma correcta de crear una tupla de un solo elemento seria de la siguiente
        forma:
            >>> h = (1973,)
            >>> h
            (1973,)
            >>> type(h)
            <class 'tuple'>
    l)  En muchos casos se pueden omitir los parentesis:
            >>> p = 1,2,3,4,5,6
            >>> p
            (1, 2, 3, 4, 5, 6)
            >>> type(p)
            <class 'tuple'>
    m)  El DESEMPAQUETADO DE TUPLAS consiste en asignarle un nombre a cada valor de una
        tupla devuelta en una funcion, como en el siguiente ejemplo:
            >>> min_max((1,2,3,5,8,13,21,))
            (1, 21)
            >>> menor, mayor= min_max((1,2,3,5,8,13,21,))
            >>> menor
            1
            >>> mayor
            21
        El desempaquetado funciona incluso hasta con tuplas anidadas:
            >>> (a,(b,(c,d)))=(4, (3,(2,1)))
            >>> a; b; c; d
            4
            3
            2
            1
    n)  Un uso muy comun del desempaquetado es para intercambiar valores de una manera muy 
        sencilla como se muestra en el ejemplo:
            >>> a = 'jelly'
            >>> b = 'bean'
            >>> a, b = b, a
            >>> a; b
            'bean'
            'jelly'
    o)  Existe una funcion incorporada en python que nos permite convertir otras colecciones
        en tuplas:
            >>> tuple([5,4,3,2,1])
            (5, 4, 3, 2, 1)
            >>> tuple('Federico')
            ('F', 'e', 'd', 'e', 'r', 'i', 'c', 'o')

2.  Las cadenas tambien son secuencias pero de caracteres, son inmutables tambien. Cuando se
    concatenan no quiere decir que se haya extendido la cadena original, sino que por la misma
    inmutabilidad se tiene que crear una cadena nueva que es la representacion de la cadena
    original con la que se le concateno.
    A continuacion vamos a ver algunas operaciones que podemos realizar con las cadenas usando
    funciones incorporadas de python:
    a)  Obtener la longitud de una cadena:
            >>> len(cadena)
            >>> regresa la longitud en caracreres contenidos en cadena
    b)  Concatenacion con metodo join()
        Esta funcion nos permite concatenar los elementos de una coleccion dada como argumento
        separados por medio del caracter o cadena que se especifique al inicio de la llamada a 
        la funcion join como en los ejemplos siguientes:
            >>> ";".join(['#214365','#547698','#325443','#879832',]) #usando una lista
            '#214365;#547698;#325443;#879832'
            >>> " : ".join(('#214365','#547698','#325443','#879832',)) # usando una tupla
            '#214365 : #547698 : #325443 : #879832'
            >>> " | ".join({'#214365','#547698','#325443','#879832',}) # usando un set
            '#214365 | #879832 | #547698 | #325443'
    c)  Tambien podemos volverlos a separar mediante el uso de la funcion incorporada split():
            >>> colors.split(';')
            ['#214365', '#547698', '#325443', '#879832']
    d)  Una forma elegante de contactenar cadenas sin un separador es usando la fucnion join con 
        cadena vacia al inicio:
            >>> ''.join(['Federico','Martinez','Escamilla',])
            'FedericoMartinezEscamilla'
    e)  Otra funcion muy util es partition() que separa una cadena en 3 partes dentro de una tupla:
        a)  La parte anterior al separador
        b)  La parte que corresponde al separador
        c)  Y la parte posterior al separador
        Veamos el ejemplo funcional de esta funcion:
            >>> 'Federico Martinez Escamilla'.partition('Martinez')
            ('Federico ', 'Martinez', ' Escamilla')
    f)  El metodo partition se usa muy comunmente para el desempaquetado de la tupla que regresa
        como se muestra a continuación:
            >>> llegada, separador, desde = 'Monterrey:CDMX'.partition(':')
            >>> llegada
            'Monterrey'
            >>> desde
            'CDMX'
        Tambien podemos usar el guin bajo para desempaquetar ahi el caracter separador que no vamos
        a utilizar:
            >>> origen, _, destino = 'MTY-CLN'.partition('-')
            >>> origen
            'MTY'
            >>> destino
            'CLN'
            >>> _
            '-'
    g)  El formateo de cadenas de puede realizar de diferentes maneras que se presentaran a 
        continuación por medio de ejemplos:
            >>> "{0}°north {1}°east".format(59.7, 10.4)
            '59.7°north 10.4°east'
            >>> "La edad de {0} es de {1} años".format('Fede', 50)
            'La edad de Fede es de 50 años'
            >>> "La edad de {0} es de {1} años. Y {0} es muy guapo!".format('Fede', 50)
            'La edad de Fede es de 50 años. Y Fede es muy guapo!'
            >>> "Numeros Fibonacci: {},{},{},{},{},{}...".format(0,1,1,2,3,5)
            'Numeros Fibonacci: 0,1,1,2,3,5...'
            >>> "Me llamo {nom} {ape}".format(nom='Federico', ape='Martinez')
            'Me llamo Federico Martinez'
            >>> "Mi posicion en R3 es x={pos[0]}, y={pos[1]}, z={pos[2]}".format(pos=(1,9,73))
            'Mi posicion en R3 es x=1, y=9, z=73'
            >>> import math
            >>> "Constantes: pi={m.pi}, e={m.e}".format(m=math)
            'Constantes: pi=3.141592653589793, e=2.718281828459045'
            >>> "Constantes: pi={m.pi:.3f}, e={m.e:.3f}".format(m=math)
            'Constantes: pi=3.142, e=2.718'
    h)  Para hacer mas simple lo anterior, PEP498 introdujo lo que se llama f-string para 
        interpolacion de cadenas. A continuación unos ejemplos:
            >>> f"uno mas uno es {1+1}"
            'uno mas uno es 2'
            >>> value = 4 * 20
            >>> f"El valor es {value}"
            'El valor es 80'
            >>> import datetime
            >>> f"The current time is {datetime.datetime.now().isoformat()}"
            'The current time is 2024-05-01T14:13:54.606998'
            >>> f"Constantes matematicas: pi={math.pi}, e={math.e}"
            'Constantes matematicas: pi=3.141592653589793, e=2.718281828459045'
            >>> f"Constantes matematicas: pi={math.pi:.3f}, e={math.e:.3f}"
            'Constantes matematicas: pi=3.142, e=2.718'
      
3.  Los objetos range son secuencias que representan una progresion aritmetica 
    de enteros:
        >>> range(5)
        range(0, 5)
        >>> range(5,2)
        range(5, 2)
        >>> range(5,2,2)
        range(5, 2, 2)
        >>> 
    Tambien podemos obtener una lista de un range():
        >>> list(range(8))
        [0, 1, 2, 3, 4, 5, 6, 7]
    Significado de los rangos segun su cantidad de argumentos:
    range(stop)                 Si solo tiene un argumento, este significa el numero donde parará
    range(start, stop)          Si tiene 2 argumentos el primero es el de inicio y el ultimo de parada
    range(start, stop, step)    Si tiene 3, el primero es inicio, el segundo parada, y el tercero el brinco

4.  La funcion enumerate() genera una lista de tuplas de (indice,valor) a partir de cualquier coleccion 
    como en los siguientes ejemplos:
        >>> lst = [13, 17, 23, 31]
        >>> for tup in enumerate(lst):
        ...     print(tup)
        ... 
        (0, 13)
        (1, 17)
        (2, 23)
        (3, 31)
    Y podemos aplicarle tambien el desempacado de tupla como en siguiente ejemplo:
        >>> for cve, val in enumerate(lst):
        ...     print(f"cve={cve}    val={val}")
        ... 
        cve=0    val=13
        cve=1    val=17
        cve=2    val=23
        cve=3    val=31

5.  Operaciones con Listas. 
    SLICING
        Es una forma extendida de la indexacion para referirse a una porcion de la 
        lista o alguna otra secuencia.
        Sintaxis:
            a_list[start:stop:step]
        Ejemplos:
            >>> lst = [13, 17, 23, 31]
            >>> lst[1:3]
            [17, 23]
            >>> lst[1:3:2]
            [17]
            >>> lst[1:4:2]
            [17, 31]
            >>> lst[1:-1]
            [17, 23]
            >>> lst[2:]
            [23, 31]
            >>> lst[:2]
            [13, 17]
        Cuando queremos copiar la referencia al objeto en otra variable lo hacemos de 
        la siguiente manera:
            >>> nue = lst
            >>> nue is lst
            True
            >>> id(nue)
            4314827776
            >>> id(lst)
            4314827776
            >>> nue == lst
            True
        Pero si queremos una copiar solamente de los objetos lo hacemos de la siguente 
        manera:
            >>> cpy = lst[:]
            >>> cpy is lst
            False
            >>> cpy == lst
            True
            >>> id(cpy) 
            4314827840
            >>> id(lst)
            4314827776
        Pero aunque hayamos hecho una nueva lista, los elementos de la nueva lista estaran 
        apuntando a los elementos de la lista copiada:
            >>> cpy[0] is lst[0]
            True
        Otras dos formas validas de crear una copia de una lista serian:
            >>> cpy = lst.copy()
            ó
            >>> cpy = list(lst)
        ENCONTRAR UN ELEMENTO
            Para este fin se utiliza la funcion incorporada list.index(elemento_a_buscar) 
            la cual regresa el numero de indice en donde se encuentra el elemento a buscar:
                [1013, 2973, 1023, 1031]
                >>> lst.index(1031)
                3
                >>> lst.index(2973)
                1
                >>> lst.index(1013)
                0
        MULTIPLICACION DE ELEMENTOS DE UNA LISTA
            Tambien podemos aplicar multiplicacion a una lista. 
                >>> s = [[-1,+1]] * 5
                >>> s
                [[-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1]]
                >>> s[2].append(7)
                >>> s
                [[-1, 1, 7], [-1, 1, 7], [-1, 1, 7], [-1, 1, 7], [-1, 1, 7]]
                >>> s[2].remove(7)
                >>> s
                [[-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1]]
                >>> s[2].remove(-1)
                >>> s
                [[1], [1], [1], [1], [1]]
                >>> s[2].append(-1)
                >>> s
                [[1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]
            Como podemos ver cada elemento de la lista apunta al mismo elemento
            contenido dentro de la lista por eso al aplicar un cambio a uno se 
            modifican los otros.
        ELIMINANDO ELEMENTOS DE UNA LISTA
            Para esto, podemos usar dos metodos:
                a) Usando la funcion del (usando el indice del elemento a eliminar):
                    >>> lst
                    [1013, 2973, 1023, 1031]
                    >>> del lst[3]
                    >>> lst
                    [1013, 2973, 1023]
                b) O usando la funcion remove (usando el elemento a eliminar en si):
                    >>> lst.remove(1023)
                    >>> lst
                    [1013, 2973]
        INSERTANDO ELEMENTOS EN UNA LISTA
            Para esto, tambien podemos utilizar dos formas de hacerlo:
                a) Usando el metodo list.insert(indice, nuevo_valor):
                    >>> a = "Anoche soñe que habias ido buscar un cariño".split()
                    >>> a
                    ['Anoche', 'soñe', 'que', 'habias', 'ido', 'buscar', 'un', 'cariño']
                    >>> a.insert(3, "te")
                    >>> a
                    ['Anoche', 'soñe', 'que', 'te', 'habias', 'ido', 'buscar', 'un', 'cariño']
                b) O utilizando el metodo append(nuevo_objeto) que lo inserta al final de la lista:
                    >>> a.append("hi")
                    >>> a
                    ['Anoche', 'soñe', 'que', 'te', 'habias', 'ido', 'buscar', 'un', 'cariño', 'hi']
        SUMA O EXTENSION DE CADENAS
            A continuacion presentamos ejemplos de este tema:
                >>> m = [1, ]
                >>> n = [2, ]
                >>> k = m + n                   # usando operador simple de suma
                >>> k
                [1, 2]
                >>> k += [20, 21, 22]           # usando operacion de suma-asignacion
                >>> k
                [1, 2, 20, 21, 22]
                >>> k.extend([98,99,100])       # usando la funcion incorporada extend(...)
                >>> k
                [1, 2, 20, 21, 22, 98, 99, 100]
        OTRAS FUNCIONES INTEGRADAS
            a) Para reversar el orden de los elementos tenemos la funcion reverse:
                >>> k.reverse()
                >>> k
                [100, 99, 98, 22, 21, 20, 2, 1]
            b)  Tambien la funcion sort() para reordenar de forma ascendente los elementos:
                >>> k.sort()
                >>> k
                [1, 2, 20, 21, 22, 98, 99, 100]
            c)  Tambien podemos usar sort() como equivalente de reverse() de la siguiente forma:
                >>> k.sort(reverse=True)
                >>> k
                [100, 99, 98, 22, 21, 20, 2, 1]
            d)  Existe un argumento llamado key que toma como entrada un objeto que determina
                una caracteristica por la cual pudiera ser ordenada una secuencia, como en el
                ejemplo de la funcion len() a continuacion:
                >>> f = "Soy una serpiente que anda por el bosque buscando una parte de mi cola".split()
                >>> f
                ['Soy', 'una', 'serpiente', 'que', 'anda', 'por', 'el', 'bosque', 'buscando', 'una', 'parte', 'de', 'mi', 'cola']
                >>> f.sort(key=len)
                >>> f
                ['el', 'de', 'mi', 'Soy', 'una', 'que', 'por', 'una', 'anda', 'cola', 'parte', 'bosque', 'buscando', 'serpiente']
                En este ejemplo, se ordeno por longitud cada una de las cadenas de la lista.

6.  DICCIONARIOS
    Los diccionarios son secuencias o arreglos de elementos de tipo clave : valor sin ningun orden en particular
    y con la caracteristica de que las claves son valores unicos e inmutables mientras que los valores si pueden 
    se mutables:
        >>> urls = {'Google' : 'https://google.com',
        ...          'Pluralsight' : 'http://pluralsight.com',
        ...          'Azure' : 'http://azure.com', }
        >>> urls
        {'Google': 'https://google.com', 'Pluralsight': 'http://pluralsight.com', 'Azure': 'http://azure.com'}
        >>> urls['FDXSOFT']='http://fdxsoft.com.mx'
        >>> urls
        {'Google': 'https://google.com', 'Pluralsight': 'http://pluralsight.com', 'Azure': 'http://azure.com', 'FDXSOFT': 'http://fdxsoft.com.mx'}
        >>> urls['FDXSOFT']='http://fdxsoft.com'
        >>> urls
        {'Google': 'https://google.com', 'Pluralsight': 'http://pluralsight.com', 'Azure': 'http://azure.com', 'FDXSOFT': 'http://fdxsoft.com'}
    Como puede ver, podemos modificar un valor de una misma llave, pero no la llave en si. Y para agregar un nuevo elemento
    usamos el nombre del diccionario seguido del nombre de la nueva clave entre corchetes  igualado todo al nuevo valor.
    
    Las claves de un diciconario son CASE-SENSITIVE, por lo cual no podemos mandar llamar un valor de un diccionario si
    no metemos exactamente igual la clave como se definio originalmente, el ejemplo siguiente nos demuestra esto:
        >>> urls['fdxsoft']    # Como metimos la clave con minusculas y no con MAYSCULAS como la original, nos arroja un error
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        KeyError: 'fdxsoft'
        >>> urls['FDXSOFT']     # Si metemos el nombre correcto de la clave existente en el diccionario, se nos mostrara su valor
        'http://fdxsoft.com'

    Para crear nuevos diccionarios en Python existe la funcion dict(). A continuacion veamos algunas formas de utilizarlo:
        # A partir de una lista de tuplas
        >>> lst = [('UNO',1),('DOS',2),('TRES',3)]
        >>> d_nums = dict(lst)
        >>> d_nums
        {'UNO': 1, 'DOS': 2, 'TRES': 3}
        # A partir de una tupla de tuplas
        >>> tup = (('FEDE',1973),('LICHA',1974),('YOLA',1978))
        >>> d_nac = dict(tup)
        >>> d_nac
        {'FEDE': 1973, 'LICHA': 1974, 'YOLA': 1978}
        # Creacion de un diccionario de manera directa
        >>> directo = dict(a='alfa', b='beta', g='gamma')
        >>> directo
        {'a': 'alfa', 'b': 'beta', 'g': 'gamma'}
        # A partir de un set de tuplas
        >>> my_set = {('FEDE',1973),('LICHA',1974),('YOLA',1978)}
        >>> my_set
        {('FEDE', 1973), ('YOLA', 1978), ('LICHA', 1974)}
        >>> st = dict(my_set)
        >>> st
        {'FEDE': 1973, 'YOLA': 1978, 'LICHA': 1974}
        # A partir de una tuplas de set's
        >>> tup = ({'FEDE',1973},{'LICHA',1974},{'YOLA',1978})
        >>> tup
        ({'FEDE', 1973}, {'LICHA', 1974}, {1978, 'YOLA'})
        >>> tp  = dict(tup)
        >>> tp
        {'FEDE': 1973, 'LICHA': 1974, 1978: 'YOLA'}
        # De aquí, podemos copiar el diccionario:
        >>> tp_cpy
        {'FEDE': 1973, 'LICHA': 1974, 1978: 'YOLA'}
        # Podemos pasar un diccionaro existente al constructor y asignarlo
        >>> tp_cpy2 = dict(tp_cpy)
        >>> tp_cpy2
        {'FEDE': 1973, 'LICHA': 1974, 1978: 'YOLA'}
        # Podemos crecer o extender nuestro diccionario con el metodo update()
        # Asignandole un diccionario directamente
        >>> st.update({'SEBAS':11, 'VALE':11, 'XIME':9})
        >>> st
        {'FEDE': 1973, 'YOLA': 1978, 'LICHA': 1974, 'SEBAS': 11, 'VALE': 11, 'XIME': 9}
        # O asignandole una referencia a otro diccionario
        >>> st.update(directo)
        >>> st
        {'FEDE': 1973, 'YOLA': 1978, 'LICHA': 1974, 'SEBAS': 11, 'VALE': 11, 'XIME': 9, 'a': 'alfa', 'b': 'beta', 'g': 'gamma'}
        # Y finalmente podemos usar el metodo update() como su nombre lo dice, 
        # para actualizar elementos de un diccionario
        >>> directo
        {'a': 'alfa', 'b': 'beta', 'g': 'gamma'}
        >>> directo.update({'a':'ALFA'})
        >>> directo
        {'a': 'ALFA', 'b': 'beta', 'g': 'gamma'}
    Los diccionario son iterables como se muestra a continuacion:
        >>> colors = dict(aquamarine='#7FFFD4', burlywood='#DEB0887',
        ...               chartreuse='#7FFF00', cornflower='#6495ED',
        ...               firebrick='#B22222', honeydew='#F0FFF0',
        ...               maroon='#B03060', sienna='#A0522D')
        >>> for key in colors:
        ...     print(f"{key} => {colors[key]}")
        ... 
        aquamarine => #7FFFD4
        burlywood => #DEB0887
        chartreuse => #7FFF00
        cornflower => #6495ED
        firebrick => #B22222
        honeydew => #F0FFF0
        maroon => #B03060
        sienna => #A0522D
    Existe una forma elegante de imprimir un diccionario utilizando la biblioteca pprint:
        >>> m
        {'H': [1, 2, 3, 4, 5, 6, 7], 'He': [3, 4], 'Li': [7, 9, 10], 'Be': [6, 7], 'B': [10, 11], 'C': [4, 5, 6, 7]}
        >>> from pprint import pprint as pp
        >>> pp(m)
        {'B': [10, 11],
        'Be': [6, 7],
        'C': [4, 5, 6, 7],
        'H': [1, 2, 3, 4, 5, 6, 7],
        'He': [3, 4],
        'Li': [7, 9, 10]}

7.  Los sets son una coleccion desordenada de elementos unicos o irrepetibles. Podemos 
    aplicar sobre este tipo de secuencias las siguientes operaciones:
    a)  Creacion de un set mediante sl contructor de la funcion incorporada set()
        el cual puede crear set's a partir de cualquier objeto iterable:
        >>> x = set([9,8,7,6,5,])   # A partir de una lista
        >>> x
        {5, 6, 7, 8, 9}
        >>> y = set((1,2,3,4))      # A partir de una tupla
        >>> y
        {1, 2, 3, 4}
        >>> z = set({1:2,3:4,5:6})  # A partir de un diccionario (por default, toma las llaves)
        >>> z
        {1, 3, 5}
        >>> w = set({1:2,3:4,5:6}.values()) # Si ocupas los elementos se hace esto
        >>> w
        {2, 4, 6}
        NOTA: *** LOS ELEMENTOS DE LOS SETS SON COMO LAS LLAVES DE LOS DICCIONARIOS, INMUTABLES Y UNICAS ***
    b)  Y tambien se pueden crear de manera directa usando la sintaxis de set's que es
        igualar el nombre del set a una secuencia de valores encerrados entre llaves:
        >>> my_set = {1,2,3,4,5,6,7,8,9,0}
        OJO: si hacemos lo siguiente:
            >>> my_set = {}
        estamos creando un diccionario vacio no un set vacio, para crear un set vacio se hace esto:
            >>> my_set = set()
    c)  Por supuesto, un set tambien puede ser iterable usando la estructura de control for:
            >>> x
            {5, 6, 7, 8, 9}
            >>> for i in x:
            ...     print(i)
            ... 
            5
            6
            7
            8
            9
    d)  Para agregarle un elemento nuevo usamos el metodo add():
            >>> x.add(100)
            >>> x
            {100, 5, 6, 7, 8, 9}
    e)  Tambien podemos agregar mas elementos al set utilizando el metodo update():
            >>> x.update([200,201,202])
            >>> x
            {100, 5, 6, 7, 8, 9, 200, 201, 202}
    f)  Podemos eliminar elementos usando el metodo remove():
            >>> x.remove(201)
            >>> x
            {100, 5, 6, 7, 8, 9, 200, 202}
        Solo hay que asegurarse que el elemento que se esta eliminando
        exista dentro del set, ya que si no, nos disparara un error:
            >>> x.remove(501)
            Traceback (most recent call last):
            File "<stdin>", line 1, in <module>
            KeyError: 501
    g)  Existe otro metodo para eliminar elementos pero que no causa error
        en el caso de que el elemento no exista en la lista:
            >>> x.discard(500)
            >>> #No paso nada
            >>> x.discard(500)
            >>> #No paso nada a pesar de que 500 no existe en el set x
            >>> x
            {100, 5, 6, 7, 8, 9, 200, 202}
            >>> x.discard(100) # Pero si el elemento existe dentro del set...
            >>> x
            {5, 6, 7, 8, 9, 200, 202}   # Lo elimina sin problema
    h)  Como las demas series, set tiene un metodo de copiado superficial:
            >>> x_cpy = x.copy()
            >>> x_cpy
            {5, 6, 7, 8, 9, 202, 200}
    i)  Podemos crear un set vacio usando unicamente su constructor:
            >>> e= set()
            >>> e = set()
            >>> e
            set()
            >>> type(e)
            <class 'set'>
    j)  Como los sets son representaciones de conjuntos matematicos es posible
        aplicar sobre estos las operaciones de conjuntos:
            >>> positivos; negativos; pares; impares; todos
            {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
            {0, -1, -9, -8, -7, -6, -5, -4, -3, -2}
            {0, 2, 4, 6, 8}
            {1, 3, 5, 7, 9}
            >>> todos = positivos.union(negativos)
            >>> todos
            {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -2, -9, -8, -7, -6, -5, -4, -3, -1}
            >>> positivos.intersection(negativos)
            {0}
            >>> pares.intersection(todos)
            {0, 2, 4, 6, 8}
            >>> impares.intersection(todos)
            {1, 3, 5, 7, 9}
            >>> todos.difference(positivos)
            {-1, -9, -8, -7, -6, -5, -4, -3, -2}
            >>> todos.difference(negativos)
            {1, 2, 3, 4, 5, 6, 7, 8, 9}
            >>> positivos.difference(pares)
            {1, 3, 5, 7, 9}
            >>> impares.issubset(todos)
            True
            >>> todos.issuperset(negativos)
            True
            >>> todos.isdisjoint(positivos)
            False
            >>> pares.isdisjoint(impares)       # disjoint significa que no tienen ningun elemento en comun
            True

8.  PROTOCOLOS. Son un conjunto de operaciones que un cierto tipo debe soportar
        para implementar el protocolo. No necesitan ser definidas como interfases
        o clases base como en C# o JAVA. Los tipos solo necesitan proveer 
        implementaciones funcionales.
        A continuacion se muestra una tabla de protocolos aplicables a los tipos de
        secuencias que hemos visto hasta ahora:

    PROTOCOLO           IMPLEMENTING COLLECTION                     EXPLICACION DEL PROTOCOLO
    =================   =========================================   =================================================
    Container           str, list, dict, range, tuple, set, bytes   item in containes, item not in container
    Sized               str, list, dict, range, tuple, set, bytes   len(container), que se puede determinar su tamaño
    Iterable            str, list, dict, range, tuple, set, bytes   que puedan usarse en bucles
    Sequence            str, list, range, tuple, bytes              [indice], index(item), .count(item), reversed() 
    Muttable Sequence
    Mutable Set 
    Muttable Mapping



